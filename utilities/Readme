Usage of the tools (see also the SISSO_guide.pdf):

- SISSO_predict.f90: read the models from SISSO.out, and make prediction on unknown/test materials.
1. Installation: ifort SISSO_predict.f90 -o ~/bin SISSO_predict
2. Use: run the command 'SISSO_predict' at your working directory
3. Input files: predict.dat (containing the test materials and features, same format with train.dat); 
                input parameters can be provided by either interactively or from a file named SISSO_predict_para 
                (see the provided template).
4. Output files: predict_X.out (descriptor coordinates for the materials in predict.dat); 
                 predict_Y.out (predicted property for the materials in predict.dat).
5. Note: avoid using the operators as variable names; otherwise the translation from string to formula will fail.


- SVC.py: find the SVC hyperplane for classification based on the descriptor from SISSO
  run 'python SVC.py >out' at your working directory where the file train.dat exists.
  Please double-check and make necessary changes in SVC.py for your applications.

- k-fold-cv & leave-percent-out-cv: creating sub-datasets for cv with SISSO
1. Define the input parameters in the file k-fold-cv.f90 (leave-percent-out-cv.f90)
2. Compile the program: ifort k-fold-cv -o kfoldcv (ifort leave-percent-out-cv.f90 -o lpocv)
3. With the all-data train.dat and corresponding SISSO.in in the working directory, run kfoldcv (or lpocv) to generate k folders
4. Double-check and sumbit the k SISSO jobs
5. Collect and analyze your cv results from the k folders

- Ionic_Radii
The table of extended Shannon radii (R. Ouyang, Chem. Mater. 32, 595 (2020).

- af2traindat.f90: Automatically creating the train.dat based on atomic features for the provided compounds
1. Prepare the two input files: atom_features (list of atomic features) and samplelist (list of training samples). 
   See the provided templates
2. Compilation: ifort af2traindat.f90 -o af2traindat
3. Use: ./af2traindat

- VarSelect.py: Variable selection assisted SISSO.
See the usage instruction in the VarSelect.py program.


